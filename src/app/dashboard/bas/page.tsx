'use client';
import { useEffect, useState } from 'react';
import { supabase } from '@/lib/supabaseClient';
import { saveAs } from 'file-saver';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { useOrgContext } from '@/context/OrgSettingsContext';
import { notify } from '@/lib/notify';

type Summary = {
  quarter: string;
  income: number;
  expense: number;
  gst_collected: number;
  gst_paid: number;
  net_gst: number;
};

type Transaction = {
  txn_date: string;
  amount: number;
  gst_amount: number;
  type: 'income' | 'expense';
};

export default function BASPage() {
  const [data, setData] = useState<Summary[]>([]);
  const [loading, setLoading] = useState(true);
  const { settings: orgSettings } = useOrgContext();

  // üßÆ Load and aggregate BAS data
  useEffect(() => {
    const loadData = async () => {
      try {
        const { data: txns, error } = await supabase
          .from('transactions')
          .select('txn_date, amount, gst_amount, type')
          .order('txn_date', { ascending: true });

        if (error) throw error;
        if (!txns?.length) {
          notify.info('No transactions found');
          setData([]);
          setLoading(false);
          return;
        }

        // Group by quarter (based on txn_date)
        const grouped: Record<string, Summary> = {};

        txns.forEach((t: Transaction) => {
          const date = new Date(t.txn_date);
          const year = date.getFullYear();
          const quarter = `Q${Math.floor(date.getMonth() / 3) + 1} ${year}`;

          if (!grouped[quarter]) {
            grouped[quarter] = {
              quarter,
              income: 0,
              expense: 0,
              gst_collected: 0,
              gst_paid: 0,
              net_gst: 0,
            };
          }

          if (t.type === 'income') {
            grouped[quarter].income += t.amount;
            grouped[quarter].gst_collected += t.gst_amount;
          } else if (t.type === 'expense') {
            grouped[quarter].expense += t.amount;
            grouped[quarter].gst_paid += t.gst_amount;
          }
        });

        const result = Object.values(grouped).map((g) => ({
          ...g,
          net_gst: g.gst_collected - g.gst_paid,
        }));

        setData(result.sort((a, b) => (a.quarter > b.quarter ? -1 : 1)));
      } catch (err: any) {
        console.error(err);
        notify.error('Error loading BAS data', err.message || String(err));
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, []);

  // üì§ Export BAS data as CSV
  const exportCSV = () => {
    if (!data.length) return notify.info('No data to export.');

    const headers = ['Quarter', 'Income', 'Expenses', 'GST Collected', 'GST Paid', 'Net GST'];
    const rows = data.map((q) => [
      q.quarter,
      q.income.toFixed(2),
      q.expense.toFixed(2),
      q.gst_collected.toFixed(2),
      q.gst_paid.toFixed(2),
      q.net_gst.toFixed(2),
    ]);

    const csvContent = [headers.join(','), ...rows.map((r) => r.join(','))].join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    saveAs(blob, `BAS_Summary_${new Date().toISOString().slice(0, 10)}.csv`);
    notify.success('CSV exported successfully');
  };

  // üìÑ Export BAS data as PDF
  const exportPDF = () => {
    if (!data.length) return notify.info('No data to export.');

    const doc = new jsPDF();

    // üßæ Header
    doc.setFontSize(14);
    doc.text('Business Activity Statement (BAS) Summary', 14, 15);

    doc.setFontSize(10);
    if (orgSettings) {
      const orgName = orgSettings.business_name ?? 'Your Organisation';
      const abn = orgSettings.abn
        ? orgSettings.abn.replace(/(\d{2})(\d{3})(\d{3})(\d{3})/, '$1 $2 $3 $4')
        : '';
      doc.text(`Organisation: ${orgName}`, 14, 22);
      if (abn) doc.text(`ABN: ${abn}`, 14, 28);
    }

    doc.text(`Generated: ${new Date().toLocaleString('en-AU')}`, 180, 15, { align: 'right' });

    // üìä Table
    autoTable(doc, {
      startY: 35,
      head: [['Quarter', 'Income (AUD)', 'Expenses (AUD)', 'GST Collected', 'GST Paid', 'Net GST']],
      body: data.map((q) => [
        q.quarter,
        q.income.toFixed(2),
        q.expense.toFixed(2),
        q.gst_collected.toFixed(2),
        q.gst_paid.toFixed(2),
        q.net_gst.toFixed(2),
      ]),
      styles: { fontSize: 10 },
      headStyles: { fillColor: [25, 118, 210] },
    });

    // üñãÔ∏è Footer
    const pageHeight = doc.internal.pageSize.height;
    doc.setFontSize(8);
    doc.text(
      'Generated by BookLogex ‚Äì Australian bookkeeping & BAS compliance',
      14,
      pageHeight - 10
    );

    doc.save(`BAS_Summary_${new Date().toISOString().slice(0, 10)}.pdf`);
    notify.success('PDF exported successfully');
  };

  if (loading) return <div className="p-6 text-gray-500">Loading BAS summary...</div>;

  return (
    <div className="p-6 space-y-6">
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-xl font-semibold">BAS Summary</h1>
        <div className="flex gap-2">
          <button
            onClick={exportCSV}
            className="px-3 py-1.5 text-sm bg-gray-200 hover:bg-gray-300 rounded"
          >
            Export CSV
          </button>
          <button
            onClick={exportPDF}
            className="px-3 py-1.5 text-sm bg-blue-600 hover:bg-blue-700 text-white rounded"
          >
            Export PDF
          </button>
        </div>
      </div>

      <table className="min-w-full bg-white border rounded shadow text-sm">
        <thead className="bg-gray-100 text-gray-700">
          <tr>
            <th className="px-4 py-2 text-left">Quarter</th>
            <th className="px-4 py-2 text-right">Income</th>
            <th className="px-4 py-2 text-right">Expenses</th>
            <th className="px-4 py-2 text-right">GST Collected</th>
            <th className="px-4 py-2 text-right">GST Paid</th>
            <th className="px-4 py-2 text-right">Net GST</th>
          </tr>
        </thead>
        <tbody>
          {data.map((q) => (
            <tr key={q.quarter} className="border-t">
              <td className="px-4 py-2">{q.quarter}</td>
              <td className="px-4 py-2 text-right">
                {q.income.toLocaleString('en-AU', { style: 'currency', currency: 'AUD' })}
              </td>
              <td className="px-4 py-2 text-right">
                {q.expense.toLocaleString('en-AU', { style: 'currency', currency: 'AUD' })}
              </td>
              <td className="px-4 py-2 text-right text-green-700">
                {q.gst_collected.toLocaleString('en-AU', { style: 'currency', currency: 'AUD' })}
              </td>
              <td className="px-4 py-2 text-right text-red-700">
                {q.gst_paid.toLocaleString('en-AU', { style: 'currency', currency: 'AUD' })}
              </td>
              <td
                className={`px-4 py-2 text-right font-semibold ${
                  q.net_gst >= 0 ? 'text-red-700' : 'text-green-700'
                }`}
              >
                {q.net_gst.toLocaleString('en-AU', { style: 'currency', currency: 'AUD' })}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
